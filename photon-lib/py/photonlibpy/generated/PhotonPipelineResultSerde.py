###############################################################################
## Copyright (C) Photon Vision.
###############################################################################
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.
###############################################################################

###############################################################################
## THIS FILE WAS AUTO-GENERATED BY ./photon-serde/generate_messages.py.
##                        --> DO NOT MODIFY <--
###############################################################################

from typing import TYPE_CHECKING

from ..packet import Packet
from ..targeting import *  # noqa

if TYPE_CHECKING:
    from ..targeting import MultiTargetPNPResult  # noqa
    from ..targeting import PhotonPipelineMetadata  # noqa
    from ..targeting import PhotonPipelineResult  # noqa
    from ..targeting import PhotonTrackedTarget  # noqa


class PhotonPipelineResultSerde:
    # Message definition md5sum. See photon_packet.adoc for details
    MESSAGE_VERSION = "4b2ff16a964b5e2bf04be0c1454d91c4"
    MESSAGE_FORMAT = "PhotonPipelineMetadata:ac0a45f686457856fb30af77699ea356 metadata;PhotonTrackedTarget:cc6dbb5c5c1e0fa808108019b20863f1 targets[?];optional MultiTargetPNPResult:541096947e9f3ca2d3f425ff7b04aa7b multitagResult;"

    @staticmethod
    def pack(value: "PhotonPipelineResult") -> "Packet":
        ret = Packet()

        # metadata is of non-intrinsic type PhotonPipelineMetadata
        ret.encodeBytes(
            PhotonPipelineMetadata.photonStruct.pack(value.metadata).getData()
        )

        # targets is a custom VLA!
        ret.encodeList(value.targets, PhotonTrackedTarget.photonStruct)

        # multitagResult is optional! it better not be a VLA too
        ret.encodeOptional(value.multitagResult, MultiTargetPNPResult.photonStruct)
        return ret

    @staticmethod
    def unpack(packet: "Packet") -> "PhotonPipelineResult":
        ret = PhotonPipelineResult()

        # metadata is of non-intrinsic type PhotonPipelineMetadata
        ret.metadata = PhotonPipelineMetadata.photonStruct.unpack(packet)

        # targets is a custom VLA!
        ret.targets = packet.decodeList(PhotonTrackedTarget.photonStruct)

        # multitagResult is optional! it better not be a VLA too
        ret.multitagResult = packet.decodeOptional(MultiTargetPNPResult.photonStruct)

        return ret


# Hack ourselves into the base class
PhotonPipelineResult.photonStruct = PhotonPipelineResultSerde()
