###############################################################################
## Copyright (C) Photon Vision.
###############################################################################
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.
###############################################################################

###############################################################################
## THIS FILE WAS AUTO-GENERATED BY ./photon-serde/generate_messages.py.
##                        --> DO NOT MODIFY <--
###############################################################################

from typing import TYPE_CHECKING

from ..packet import Packet
from ..targeting import *  # noqa

if TYPE_CHECKING:
    from ..targeting import PhotonPipelineMetadata  # noqa


class PhotonPipelineMetadataSerde:
    # Message definition md5sum. See photon_packet.adoc for details
    MESSAGE_VERSION = "ac0a45f686457856fb30af77699ea356"
    MESSAGE_FORMAT = "int64 sequenceID;int64 captureTimestampMicros;int64 publishTimestampMicros;int64 timeSinceLastPong;"

    @staticmethod
    def pack(value: "PhotonPipelineMetadata") -> "Packet":
        ret = Packet()

        # sequenceID is of intrinsic type int64
        ret.encodeLong(value.sequenceID)

        # captureTimestampMicros is of intrinsic type int64
        ret.encodeLong(value.captureTimestampMicros)

        # publishTimestampMicros is of intrinsic type int64
        ret.encodeLong(value.publishTimestampMicros)

        # timeSinceLastPong is of intrinsic type int64
        ret.encodeLong(value.timeSinceLastPong)
        return ret

    @staticmethod
    def unpack(packet: "Packet") -> "PhotonPipelineMetadata":
        ret = PhotonPipelineMetadata()

        # sequenceID is of intrinsic type int64
        ret.sequenceID = packet.decodeLong()

        # captureTimestampMicros is of intrinsic type int64
        ret.captureTimestampMicros = packet.decodeLong()

        # publishTimestampMicros is of intrinsic type int64
        ret.publishTimestampMicros = packet.decodeLong()

        # timeSinceLastPong is of intrinsic type int64
        ret.timeSinceLastPong = packet.decodeLong()

        return ret


# Hack ourselves into the base class
PhotonPipelineMetadata.photonStruct = PhotonPipelineMetadataSerde()
