plugins {
  id "edu.wpi.first.NativeUtils" version "2021.1.1"
}

apply plugin: 'java'

String wpilibVersion = "2021.1.2"
String opencvVersion = "3.4.7-5"
String ejmlVersion = "0.38"
String jacksonVersion = "2.10.0"

repositories {
    maven {
        url = 'https://frcmaven.wpi.edu:443/artifactory/release'
    }
}

dependencies {
    implementation project(':photon-lib')
    implementation project(':photon-targeting')

    implementation "edu.wpi.first.wpilibj:wpilibj-java:${wpilibVersion}"
    implementation "edu.wpi.first.wpimath:wpimath-java:${wpilibVersion}"
    implementation "edu.wpi.first.ntcore:ntcore-java:${wpilibVersion}"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:${wpilibVersion}"
    implementation "edu.wpi.first.thirdparty.frc2021.opencv:opencv-java:${opencvVersion}"
    implementation "edu.wpi.first.cscore:cscore-java:${wpilibVersion}"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:${wpilibVersion}"
    implementation "edu.wpi.first.hal:hal-java:${wpilibVersion}"
    implementation "org.ejml:ejml-simple:${ejmlVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
}
 
//apply plugin: 'java'
apply plugin: 'cpp'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: '../shared/config.gradle'

//Copied from wpi repos... not 100% sure what it does
ext.getCurrentArch = {
    return NativePlatforms.desktop
}

model {
    components {
        wpilibjExamplesDev(NativeExecutableSpec) {
            targetBuildTypes 'debug'
            sources {
                cpp {
                    source {
                        srcDirs 'src/dev/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/dev/native/include'
                    }
                }
            }
            binaries.all { binary ->
                lib project: ':wpilibOldCommands', library: 'wpilibOldCommands', linkage: 'shared'
                lib project: ':wpilibNewCommands', library: 'wpilibNewCommands', linkage: 'shared'
                lib project: ':wpilibc', library: 'wpilibc', linkage: 'shared'
                lib project: ':wpimath', library: 'wpimath', linkage: 'shared'
                lib project: ':ntcore', library: 'ntcore', linkage: 'shared'
                lib project: ':cscore', library: 'cscore', linkage: 'shared'
                lib project: ':ntcore', library: 'ntcoreJNIShared', linkage: 'shared'
                lib project: ':cscore', library: 'cscoreJNIShared', linkage: 'shared'
                // project(':hal').addHalDependency(binary, 'shared') I think this is actualy needed, but gradle's complaining it can't find it or doesn't know what it is?
                // project(':hal').addHalJniDependency(binary)
                lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
                lib project: ':cameraserver', library: 'cameraserver', linkage: 'shared'
                if (binary.targetPlatform.name == nativeUtils.wpi.platforms.roborio) {
                    nativeUtils.useRequiredLibrary(binary, 'netcomm_shared', 'chipobject_shared', 'visa_shared', 'ni_runtime_shared')
                } else {
                    def systemArch = getCurrentArch()
                    if (binary.targetPlatform.name == systemArch) {
                        lib project: ":simulation:halsim_gui", library: 'halsim_gui', linkage: 'shared'
                    }
                }
                nativeUtils.useRequiredLibrary(binary, 'opencv_shared')
            }
        }
    }
    tasks {
        def c = $.components
        def found = false
        c.each {
            if (it in NativeExecutableSpec && it.name == "wpilibjExamplesDev") {
                it.binaries.each {
                    if (!found) {
                        def arch = it.targetPlatform.name
                        if (arch == NativePlatforms.desktop) {
                            found = true
                            def filePath = it.tasks.install.installDirectory.get().toString() + File.separatorChar + 'lib'

                            def doFirstTask = { task ->
                                def extensions = ''
                                it.tasks.install.installDirectory.get().getAsFile().eachFileRecurse {
                                    def name = it.name
                                    if (!(name.endsWith('.dll') || name.endsWith('.so') || name.endsWith('.dylib'))) {
                                        return
                                    }
                                    def file = it
                                    if (name.startsWith("halsim_gui") || name.startsWith("libhalsim_gui".toString())) {
                                        extensions += file.absolutePath + File.pathSeparator
                                    }
                                }
                                if (extensions != '') {
                                    task.environment 'HALSIM_EXTENSIONS', extensions
                                }
                            }

                            project.tasks.create("runCpp", Exec) { task ->
                                dependsOn it.tasks.install
                                commandLine it.tasks.install.runScriptFile.get().asFile.toString()
                                test.dependsOn it.tasks.install
                                test.systemProperty 'java.library.path', filePath
                                test.environment 'LD_LIBRARY_PATH', filePath
                                test.workingDir filePath
                            }

                            new groovy.json.JsonSlurper().parseText(exampleFile.text).each { entry ->
                                project.tasks.create("run${entry.foldername}", JavaExec) { run ->
                                    main = "edu.wpi.first.wpilibj.examples." + entry.foldername + ".Main"
                                    classpath = sourceSets.main.runtimeClasspath
                                    run.dependsOn it.tasks.install
                                    run.systemProperty 'java.library.path', filePath
                                    run.environment 'LD_LIBRARY_PATH', filePath
                                    run.workingDir filePath
                                    doFirst { doFirstTask(run) }

                                    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
                                        run.jvmArgs = ['-XstartOnFirstThread']
                                    }
                                }
                            }

                            found = true
                        }
                    }
                }
            }
        }
    }
}



ext {
    exampleDirectory = new File("$projectDir/src/main/java/edu/wpi/first/wpilibj/examples/")
    exampleFile = new File("$projectDir/src/main/java/edu/wpi/first/wpilibj/examples/examples.json")
}