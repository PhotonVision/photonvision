/*
 * MIT License
 *
 * Copyright (c) PhotonVision
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// THIS FILE WAS AUTO-GENERATED BY ./photon-serde/generate_messages.py. DO NOT MODIFY

#include "photon/serde/PhotonTrackedTargetSerde.h"

namespace photon {

using StructType = SerdeType<PhotonTrackedTarget>;

void StructType::Pack(Packet& packet, const PhotonTrackedTarget& value) {
  packet.Pack<double>(value.yaw);
  packet.Pack<double>(value.pitch);
  packet.Pack<double>(value.area);
  packet.Pack<double>(value.skew);
  packet.Pack<int32_t>(value.fiducialId);
  packet.Pack<int32_t>(value.objDetectId);
  packet.Pack<float>(value.objDetectConf);
  packet.Pack<frc::Transform3d>(value.bestCameraToTarget);
  packet.Pack<frc::Transform3d>(value.altCameraToTarget);
  packet.Pack<double>(value.poseAmbiguity);
  packet.Pack<std::vector<photon::TargetCorner>>(value.minAreaRectCorners);
  packet.Pack<std::vector<photon::TargetCorner>>(value.detectedCorners);
}

PhotonTrackedTarget StructType::Unpack(Packet& packet) {
  return PhotonTrackedTarget{ PhotonTrackedTarget_PhotonStruct{
    .yaw = packet.Unpack<double>(),
    .pitch = packet.Unpack<double>(),
    .area = packet.Unpack<double>(),
    .skew = packet.Unpack<double>(),
    .fiducialId = packet.Unpack<int32_t>(),
    .objDetectId = packet.Unpack<int32_t>(),
    .objDetectConf = packet.Unpack<float>(),
    .bestCameraToTarget = packet.Unpack<frc::Transform3d>(),
    .altCameraToTarget = packet.Unpack<frc::Transform3d>(),
    .poseAmbiguity = packet.Unpack<double>(),
    .minAreaRectCorners = packet.Unpack<std::vector<photon::TargetCorner>>(),
    .detectedCorners = packet.Unpack<std::vector<photon::TargetCorner>>(),
  }};
}

} // namespace photon
