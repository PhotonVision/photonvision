/*
 * MIT License
 *
 * Copyright (c) PhotonVision
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// THIS FILE WAS AUTO-GENERATED BY ./photon-serde/generate_messages.py. DO NOT MODIFY

package org.photonvision.struct;

import org.photonvision.common.dataflow.structures.Packet;
import org.photonvision.common.dataflow.structures.PacketSerde;
import org.photonvision.utils.PacketUtils;

// Assume that the base class lives here and we can import it
import org.photonvision.targeting.*;

// WPILib imports (if any)
import edu.wpi.first.util.struct.Struct;
{% for type in nested_wpilib_types -%}
import {{ get_message_by_name(type).java_import }};
{%- if not loop.last %},{% endif -%}
{%- endfor%}

/**
 * Auto-generated serialization/deserialization helper for {{name}}
 */
public class {{ name }}Serde implements PacketSerde<{{name}}> {

    @Override
    public final String getInterfaceUUID() { return "{{ message_hash }}"; }
    @Override
    public final String getSchema() { return "{{ message_fmt }}"; }
    @Override
    public final String getTypeName() { return "{{ name }}"; }

    @Override
    public int getMaxByteSize() {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'getMaxByteSize'");
    }

    @Override
    public void pack(Packet packet, {{ name }} value) {
{%- for field in fields -%}
{%- if field.type | is_shimmed %}
        {{ get_message_by_name(field.type).java_encode_shim }}(packet, value.{{ field.name }});
{%- elif field.optional == True %}
        // {{ field.name }} is optional! it better not be a VLA too
        packet.encodeOptional(value.{{ field.name }});
{%- elif field.vla == True and field.type | is_intrinsic %}
        // {{ field.name }} is a intrinsic VLA!
        packet.encode(value.{{ field.name }});
{%- elif field.vla == True %}
        // {{ field.name }} is a custom VLA!
        packet.encodeList(value.{{ field.name }});
{%- elif field.type | is_intrinsic %}
        // field {{ field.name }} is of intrinsic type {{ field.type }}
        packet.encode(({{ type_map[field.type].java_type }}) value.{{ field.name }});
{%- else %}
        // field {{ field.name }} is of non-intrinsic type {{ field.type }}
        {{ field.type }}.photonStruct.pack(packet, value.{{ field.name }});
{%- endif %}
{%- if not loop.last %}
{% endif -%}
{% endfor%}
    }

    @Override
    public {{ name }} unpack(Packet packet) {
        var ret = new {{ name }}();
{% for field in fields -%}
{%- if field.type | is_shimmed %}
        ret.{{ field.name }} = {{ get_message_by_name(field.type).java_decode_shim }}(packet);
{%- elif field.optional == True %}
        // {{ field.name }} is optional! it better not be a VLA too
        ret.{{ field.name }} = packet.decodeOptional({{ field.type }}.photonStruct);
{%- elif field.vla == True and not field.type | is_intrinsic %}
        // {{ field.name }} is a custom VLA!
        ret.{{ field.name }} = packet.decodeList({{ field.type }}.photonStruct);
{%- elif field.vla == True and field.type | is_intrinsic %}
        // {{ field.name }} is a custom VLA!
        ret.{{ field.name }} = packet.decode{{ type_map[field.type].java_type.title() }}List();
{%- elif field.type | is_intrinsic %}
        // {{ field.name }} is of intrinsic type {{ field.type }}
        ret.{{field.name}} = packet.{{ type_map[field.type].java_decode_method }}();
{%- else %}
        // {{ field.name }} is of non-intrinsic type {{ field.type }}
        ret.{{field.name}} = {{ field.type }}.photonStruct.unpack(packet);
{%- endif %}
{%- if not loop.last %}
{% endif -%}
{% endfor%}

        return ret;
    }

    @Override
    public PacketSerde<?>[] getNestedPhotonMessages() {
        return new PacketSerde<?>[] {
            {% for type in nested_photon_types -%}
            {{ type }}.photonStruct
            {%- if not loop.last %},{% endif -%}
            {%- endfor%}
        };
    }

    @Override
    public Struct<?>[] getNestedWpilibMessages() {
        return new Struct<?>[] {
            {% for type in nested_wpilib_types -%}
            {{ type }}.struct
            {%- if not loop.last %},{% endif -%}
            {%- endfor%}
        };
    }
}{{'\n'}}
